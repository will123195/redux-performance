{"version":3,"sources":["Cell.js","Matrix.js","serviceWorker.js","index.js","App.js"],"names":["connect","state","ownProps","color","colors","n","style","width","height","textAlign","padding","float","backgroundColor","id","key","numColorUpdates","startTime","numElements","secondsRunning","Date","now","elements","push","fontWeight","toLocaleString","Math","floor","Boolean","window","location","hostname","match","duration","initialState","store","createStore","action","type","setColor","randomColor","random","toString","dispatch","setTimeout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAoBA,IAMeA,eANS,SAACC,EAAOC,GAC9B,MAAO,CACLC,MAAOF,EAAMG,OAAOF,EAASG,MAIlBL,EAvBf,YAA6B,IAAbK,EAAY,EAAZA,EAAGF,EAAS,EAATA,MACjB,OACE,yBACEG,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,UAAW,SACXC,QAAS,GACTC,MAAO,OACPC,gBAAiBT,GAEnBU,GAAE,UAAKR,GACPS,IAAG,UAAKT,IACRA,MCQN,IAOeL,eAPS,SAACC,GACvB,MAAO,CACLc,gBAAiBd,EAAMc,iBAAmB,EAC1CC,UAAWf,EAAMe,aAINhB,EA3Bf,YAGE,IAH4D,IAA5CiB,EAA2C,EAA3CA,YAAaF,EAA8B,EAA9BA,gBAAiBC,EAAa,EAAbA,UACxCE,GAAkBC,KAAKC,MAAQJ,GAAa,IAC5CK,EAAW,GACRhB,EAAI,EAAGA,GAAKY,EAAaZ,IAChCgB,EAASC,KAAK,kBAAC,EAAD,CAAMR,IAAKT,EAAGA,EAAGA,KAEjC,OACE,6BACE,wBAAIC,MAAO,CAAEiB,WAAY,MAAO,8BAAOL,GAAvC,KACA,6BAAMH,EAAgBS,iBAAtB,WACA,6BACGC,KAAKC,MAAMX,EAAkBG,GADhC,sBAGA,yBAAKZ,MAAO,CAAEC,MAAO,MAClBc,OCNWM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXAf,EAAYG,KAAKC,MACjBY,EAAW,IAEXC,EAAe,CACnB7B,OAAQ,GACRY,aAwBF,IACID,EAAkB,EAChBmB,EAAQC,aAvBd,WAAgD,IAA/BlC,EAA8B,uDAAtBgC,EAAcG,EAAQ,uCAC7C,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,eACFpC,EADL,CAEEG,OAAO,eACFH,EAAMG,OADL,eAEHgC,EAAO/B,EAAI+B,EAAOjC,UAGzB,IAAK,eAAL,IACUY,EAAoBqB,EAApBrB,gBACR,OAAO,eACFd,EADL,CAEEc,oBAEJ,QACE,OAAOd,MAmBb,SAASqC,EAASjC,GAChB,IAAMkC,EAAW,WAAOd,KAAKC,MAAoB,SAAdD,KAAKe,UAAmBC,SAAS,KACpEP,EAAMQ,SAAS,CACbL,KAAM,YACNhC,IACAF,MAAOoC,IAETxB,IACAmB,EAAMQ,SAAS,CACbL,KAAM,eACNtB,oBAEEI,KAAKC,MAAQJ,GAAagB,GAC9BW,YAAW,kBAAML,EAASjC,KAAI,GAxBhCuC,IAASC,OACP,kBAAC,IAAD,CAAUX,MAAOA,GACf,mBCvCW,YAA+B,IAAhBjB,EAAe,EAAfA,YAC5B,OAAO,oCACL,2CACA,kBAAC,EAAD,CAAQA,YAAaA,ODoCrB,CAAKA,YANW,OAQlB6B,SAASC,eAAe,SDuFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBClEnB,IAAK,IAAIhD,EAAI,EAAGA,GA/BI,IA+BcA,IAChCiC,EAASjC,K","file":"static/js/main.f20ef283.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nfunction Cell({ n, color }) {\n  return (\n    <div \n      style={{ \n        width: 30,\n        height: 30,\n        textAlign: 'center',\n        padding: 10,\n        float: 'left',\n        backgroundColor: color\n      }} \n      id={`${n}`}\n      key={`${n}`}\n    >{n}</div>\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    color: state.colors[ownProps.n]\n  }\n}\n\nexport default connect(mapStateToProps)(Cell)","import React from 'react'\nimport { connect } from 'react-redux'\nimport Cell from './Cell'\n\nfunction Matrix({ numElements, numColorUpdates, startTime }) {\n  const secondsRunning = (Date.now() - startTime) / 1000\n  const elements = []\n  for (let n = 1; n <= numElements; n++) {\n    elements.push(<Cell key={n} n={n} />)\n  }\n  return (\n    <div>\n      <h1 style={{ fontWeight: 100 }}><span>{secondsRunning}</span>s</h1>\n      <div>{numColorUpdates.toLocaleString()} colors</div>\n      <div>\n        {Math.floor(numColorUpdates / secondsRunning)} colors per second\n      </div>\n      <div style={{ width: 500 }}>\n        {elements}\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    numColorUpdates: state.numColorUpdates || 0,\n    startTime: state.startTime\n  }\n}\n\nexport default connect(mapStateToProps)(Matrix)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nconst startTime = Date.now()\nconst duration = 30000\n\nconst initialState = {\n  colors: {},\n  startTime\n}\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_COLOR':\n      return { \n        ...state, \n        colors: { \n          ...state.colors,\n          [action.n]: action.color\n        }\n      }\n    case 'UPDATE_COUNT':\n      const { numColorUpdates } = action\n      return {\n        ...state,\n        numColorUpdates\n      }\n    default:\n      return state\n  }\n}\n\nconst numElements = 100\nlet numColorUpdates = 0\nconst store = createStore(reducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App numElements={numElements} />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction setColor(n) {\n  const randomColor = `#${Math.floor(Math.random()*16777215).toString(16)}`\n  store.dispatch({\n    type: 'ADD_COLOR',\n    n,\n    color: randomColor\n  })\n  numColorUpdates++\n  store.dispatch({\n    type: 'UPDATE_COUNT',\n    numColorUpdates\n  })\n  if (Date.now() - startTime >= duration) return\n  setTimeout(() => setColor(n), 0)\n}\n\nfor (let n = 1; n <= numElements; n++) {\n  setColor(n)\n}","import React from 'react'\nimport Matrix from './Matrix'\n\nexport default function App({ numElements }) {\n  return <>\n    <h1>React Redux</h1>\n    <Matrix numElements={numElements} />\n  </>\n}\n"],"sourceRoot":""}